buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'com.bmuschko:gradle-nexus-plugin:2.3.1'
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.1'
    }
}

plugins {
    id "com.zyxist.chainsaw" version "0.3.1"
    id 'com.github.hierynomus.license' version '0.14.0'
    id 'io.codearte.nexus-staging' version '0.9.0'
}

ext {
    /* Testing */
    activationApiVersion = '1.2.0'
    commonsCollectionsVersion = '4.1'
    commonsRdfJenaVersion = '0.6.0-SNAPSHOT'
    commonsRdfVersion = '0.5.0'
    dexxCollectionVersion = '0.7'
    dropwizardVersion = '1.2.0'
    hamcrestLibraryVersion = '1.3'
    httpclientVersion = '4.5.3'
    jenaVersion = '3.8.0-SNAPSHOT'
    jettyAlpnVersion = '9.4.8.v20171121'
    jsonldVersion = '0.12.0'
    jsonWebTokenVersion = '0.9.0'
    junitVersion = '5.1.0'
    logbackVersion = '1.2.3'
    jaxrsVersion = '2.1'
    kafkaVersion = '1.0.0_1'
    mustacheVersion = '0.9.5_1'
    slf4jVersion = '1.7.25'
    servicemixXercesVersion = '2.11.0_1'
    thriftVersion = '0.11.0'
    trellisVersion = '0.7.0-SNAPSHOT'

    /* OSGI */
    osgiEeJavaVersion= 'osgi.ee;filter:="(&(osgi.ee=JavaSE)(version=1.10))'
    projectOsgiVersion = project.version.replaceAll("-SNAPSHOT", ".SNAPSHOT")

    jacocoVersion = '0.8.1'
    checkstyleVersion = '8.8'

    jacocoTestProjects = [
            'trellis-client'
    ]
}

allprojects { subproj ->

    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'checkstyle'
    apply plugin: 'com.bmuschko.nexus'
    apply plugin: 'org.junit.platform.gradle.plugin'
    apply plugin: 'jacoco'

    ext {
        name = 'TrellisLDP Client'
        moduleName = 'org.trellisldp.client'
        description = 'A Linked Data Platform Client'
        url = 'https://github.com/trellisldp/trellis-client'
        inceptionYear = '2017'
        vendor = 'Trellis LDP'
        homepage = 'https://www.trellisldp.org'
        docURL = 'https://trellis-ldp.github.io/trellis-client/apidocs/'
        license = 'Apache 2'
    }

    jacoco.toolVersion = jacocoVersion

    group = 'org.trellisldp'

    repositories {
        mavenCentral()
        flatDir {
            dirs "$rootProject.projectDir/lib"
        }
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs.add("-Xlint:unchecked")
            options.compilerArgs.add("-Xlint:deprecation")
            options.compilerArgs.addAll(["--add-modules", "jdk.incubator.httpclient"])
        }
    }

    junitPlatformTest.jvmArgs("--add-modules", "jdk.incubator.httpclient")

    dependencies {
        testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
        testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
    }

}

subprojects { subproj ->

    sourceCompatibility = 1.10
    targetCompatibility = 1.10

    checkstyle {
        configFile = rootProject.file('buildtools/src/main/resources/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('buildtools/src/main/resources/checkstyle/')
        toolVersion = checkstyleVersion
    }

    license {
        include "**/*.java"
        header rootProject.file('buildtools/src/main/resources/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
            }
        }
    }

    modifyPom {
        //noinspection GroovyAssignabilityCheck
        project {
            name name
            description description
            url url
            inceptionYear inceptionYear

            organization {
                name vendor
                url homepage
            }

            developers {
                developer {
                    id 'christopher-johnson'
                    name 'Christopher Johnson'
                    email 'chjohnson @ (domain of organization url)'
                    organization = 'Trellis LDP'
                    organizationUrl 'https://www.trellisldp.org'
                    roles {
                        role 'developer'
                    }
                    timezone '+1'
                }
            }

            scm {
                connection 'scm:git:git://github.com/trellis-ldp/trellis-client.git'
                developerConnection 'scm:git:git://github.com/trellis-ldp/trellis-client.git'
                url 'https://github.com/trellisldp/trellis-client/'
                tag 'HEAD'
            }

            licenses {
                license {
                    name 'Apache License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0'
                }
            }
        }
    }

    nexusStaging {
        packageGroup = "org.trellisldp"
        //stagingProfileId = "4d5f13c386f543"
    }

    nexus {
        sign = true
        repositoryUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
        snapshotRepositoryUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
    }

    javadoc {
        inputs.property("moduleName", moduleName)
        doFirst {
            options.addStringOption('-module-path', classpath.asPath)
            options.addBooleanOption('html5', true)
        }
        destinationDir = new File(projectDir, "docs/${version}")
        options {
            links "https://docs.oracle.com/javase/8/docs/api/"
            links 'https://docs.oracle.com/javaee/7/api/'
            links 'https://trellis-ldp.github.io/trellis/apidocs/'
            links 'https://commons.apache.org/proper/commons-rdf/apidocs/'
        }
    }

    afterEvaluate {
        if (subproj.name in jacocoTestProjects) {
            jacoco {
                applyTo junitPlatformTest
            }
        }
    }
}

configure(rootProject) {
    task jacocoMerge(type: JacocoMerge) {
        subprojects.findAll { it.name in jacocoTestProjects }
                .each { subproj ->
            executionData fileTree(dir: "${subproj.buildDir}/jacoco", include: '*.exec')
            dependsOn subproj.tasks.withType(Test)
        }
    }

    task jacocoRootReport(type: JacocoReport, dependsOn: jacocoMerge) {
        sourceDirectories = files(subprojects
                .findAll { it.name in jacocoTestProjects }
                .sourceSets.main.allSource.srcDirs)
        classDirectories = files(subprojects
                .findAll { it.name in jacocoTestProjects }
                .sourceSets.main.output)
        executionData jacocoMerge.destinationFile
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }
}